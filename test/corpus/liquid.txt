==================
Literal
==================

<html>
  {{ 'string' }}
</html>

---
(template
 (content)
 (tag
  (expression
   (string)))
 (content))

==================
Filter
==================

<html>
  {{ 'string two' | split: " " }}
</html>

---
(template
 (content)
 (tag
  (expression
   (filter
    body: (expression (string))
    name: (identifier)
    (argument_list (string)))))
 (content))

==================
Filter w/ variable
==================

<html>
  {%assign space = " " %}
  <div>{{ 'string two' | split: space }}</div>
</html>

---
(template
 (content)
 (tag
  (statement
   (assignment
    variable_name: (identifier)
    value: (expression (string)))))
 (content)
 (tag
  (expression
   (filter
    body: (expression (string))
    name: (identifier)
    (argument_list (identifier)))))
 (content))

==================
Many filters
==================

<html>
  {{ 'string two' | split: space | first }}
</html>

---
(template
 (content)
 (tag
  (expression
   (filter
    body:
    (expression
     (filter
      body: (expression (string))
      name: (identifier)
      (argument_list (identifier))))
    name: (identifier))))
 (content))

==================
Filters with many arguments
==================

<html>
  {% assign kitchen_products = products | where: "type", "kitchen" %}
</html>

---
(template
 (content)
 (tag
  (statement
   (assignment
    variable_name: (identifier)
    value:
    (expression
     (filter
      body: (expression (identifier))
      name: (identifier)
      (argument_list (string) (string)))))))
 (content))

==================
Filters argument hash
==================

<html>
  {{ display_price | default: true, allow_false: true }}
</html>

---
(template
 (content)
 (tag
 (expression
  (filter
   body: (expression (identifier))
   name: (identifier)
   (argument_list
    (boolean)
    (argument key: (identifier) value: (boolean))))))
 (content))

==================
Filters precedence
==================

<html>
  {{ "Ground control to Major Tom." | split: "" | reverse | join: "" }}
</html>

---
(template
 (content)
 (tag
  (expression
   (filter
    body:
    (expression
     (filter
      body:
      (expression
       (filter
        body: (expression (string))
        name: (identifier)
        (argument_list (string))))
      name: (identifier)))
    name: (identifier)
    (argument_list (string)))))
 (content))

==================
Method Call
==================

<html>
  {{ page.title }}
</html>

---
(template
 (content)
 (tag
  (expression
   (access
    receiver: (identifier)
    method: (identifier))))
 (content))

==================
Compound Method Call With Filter
==================

<html>
  {{ data["page"].title | reverse}}
</html>

---
(template
 (content)
 (tag
  (expression
   (filter
    body:
    (expression
     (access
      receiver:
      (access
       receiver: (identifier)
       method: (string))
      method: (identifier)))
    name: (identifier))))
 (content))

==================
Render 
==================

<html>
  {% render 'filename' %}
</html>

---
(template
 (content)
 (tag
  (statement
   (render
    rendered_file: (string))))
 (content))

==================
Render Loop
==================

<html>
  {% render 'filename' for array as item %}
</html>

---
(template
 (content)
 (tag
  (statement
   (render
    rendered_file: (string)
      param: (opt_as_expr
        item: (identifier)
        identifier: (identifier)))))
 (content))

==================
Render With
==================

<html>
  {% render 'filename' with object%}
</html>

---
(template
 (content)
 (tag
  (statement
   (render
    rendered_file: (string)
      param: (opt_as_expr
        item: (identifier)))))
 (content))

==================
Render Variable
==================

<html>
  {% render 'filename', variable: value %}
</html>

---
(template
 (content)
 (tag
  (statement
   (render
    rendered_file: (string)
    param: (argument_list
      (argument
       key: (identifier)
       value: (identifier))))))
 (content))

==================
Include 
==================

<html>
  {% include 'filename' %}
</html>

---
(template
 (content)
 (tag
  (statement
   (include
    (string))))
 (content))

==================
If Statement
==================

<html>
  {% if data.url != blank %}
    hello
  {% endif %}
</html>

---
(template
 (content)
 (tag
  (if_tag
   condition: (expression
     (predicate
      left: (expression 
        (access
         receiver: (identifier)
         method: (identifier)))
      right: (expression 
        (identifier))))
   consequence: (block
     (content))))
 (content))

==================
If Contains Statement
==================

<html>
  {% if product.tags contains 'healing' %}
    This potion contains restorative properties.
  {% endif %}
</html>

---
(template
 (content)
 (tag
  (if_tag
   condition: (expression
     (predicate
      left: (expression 
        (access
         receiver: (identifier)
         method: (identifier)))
      right: (expression 
        (string))))
   consequence: (block
     (content))))
 (content))

==================
Multi Level If
==================

<html>
  {%- if template contains 'list' -%}
    {%- assign limit = section.settings.grid | times: section.settings.rows -%}
  {% elseif sections.settings.grid == 10 %}
    {{ render "page" }}
  {%- else -%}
    {%- assign limit = 16 -%}
  {%- endif -%}
</html>

---
()

==================
Unless
==================

<html>
  {% unless product.has_only_default_variant %}
    expression
  {% endunless %}
</html>

---
(template
 (content)
 (tag
  (unless_tag
   condition: (expression 
     (access 
      receiver: (identifier)
      method: (identifier)))
   consequence: (block 
     (content))))
 (content))

==================
Case
==================

<html>
  {% case product.type %}
    {% when 'Love' or "whateva" %}
      This is a love or luck potion.
    {% when 'Strength' %}
      This is a strength or health potion.
    {% else %}
      This is a potion.
  {% endcase %}
</html>

---
()


==================
For Loop Reversed
==================

<html>
  {% for product in collection.products reversed -%}
    {{ product.title }}
  {%- endfor %}
</html>
---
()

==================
For Loop Offest
==================

<html>
  {% for product in collection.products offest: 2 -%}
    {{ product.title }}
  {%- endfor %}
</html>
---
()

==================
For Loop With Range
==================

<html>
  {% for i in (1..upper_limit) -%}
    {{ i }}
    {{ break }}
  {%- endfor %}
</html>
---
()

==================
Paired Tag Comment
==================

<html>
  {% comment %}
    {% render "something" %}
    {{ data.page.title | reverse }}
    <div>hi</div>
    {{ data.page }}
    asdf
  {% endcomment %}
</html>

---
(template
 (content)
  (tag
    (comment))
 (content))

==================
Inline Comment
==================

<html>
  {% render #comment %}
</html>

---
(template
 (content)
  (tag
    (comment))
 (content))


==================
Liquid Tag
==================

<html>
  {% liquid
    include "file"
    assign product_type = product.type | downcase

    if product_type != blank
      echo product_type
    else
      assign product_type = "type"
    endif
  %}
</html>

---
(template
 (content)
 (tag
  (liquid_tag
   (statement
    (include
     (string)))
   (statement
    (assignment
     (identifier)
     (expression
      (filter
       (expression
        (access
         (identifier)
         (identifier)))
       (identifier)))))
   (if_statement
    (expression
     (predicate
      (expression
       (identifier))
      (expression
       (identifier))))
    (block
     (statement
      (echo
       (expression
        (identifier)))))
    (else_statement
     (block
      (statement
       (assignment
        (identifier)
        (expression
         (string)))))))))
(content))

==================
Liquid Tag With Case
==================

<html>
  {% liquid

    assign product_type = product.type | downcase
    assign message = ''

    case product_type
      when 'health'
        assign message = 'This is a health potion!'
      when 'love'
        assign message = 'This is a love potion!'
      else
        assign message = 'This is a potion!'
    endcase

    echo message
  %}
</html>

---
()

==================
Liquid Tag With For Loop
==================

<html>
  {% liquid

    for product_type in product.types
      echo product_type
    endfor
  %}
</html>

---
()

==================
Embeded String Expression With Statment Keyword As Access
==================

<html>
  <div class="width-{{ render.asdf }} fadeIn" data-delay="100ms">
</html>

---
()

