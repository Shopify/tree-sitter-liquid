==================
Literal
==================

<html>
  {{ 'string' }}
</html>

---
(template
 (content)
 (directive
  (expression
   (string)))
 (content))

==================
Filter
==================

<html>
  {{ 'string two' | split: " " }}
</html>

---
(template
 (content)
 (directive
  (expression
   (filter
    body: (expression (string))
    name: (identifier)
    (argument_list (string)))))
 (content))

==================
Filter w/ variable
==================

<html>
  {%assign space = " " %}
  <div>{{ 'string two' | split: space }}</div>
</html>

---
(template
 (content)
 (directive
  (statement
   (assignment
    variable_name: (identifier)
    value: (expression (string)))))
 (content)
 (directive
  (expression
   (filter
    body: (expression (string))
    name: (identifier)
    (argument_list (identifier)))))
 (content))

==================
Many filters
==================

<html>
  {{ 'string two' | split: space | first }}
</html>

---
(template
 (content)
 (directive
  (expression
   (filter
    body:
    (expression
     (filter
      body: (expression (string))
      name: (identifier)
      (argument_list (identifier))))
    name: (identifier))))
 (content))

==================
Filters with many arguments
==================

<html>
  {% assign kitchen_products = products | where: "type", "kitchen" %}
</html>

---
(template
 (content)
 (directive
  (statement
   (assignment
    variable_name: (identifier)
    value:
    (expression
     (filter
      body: (expression (identifier))
      name: (identifier)
      (argument_list (string) (string)))))))
 (content))

==================
Filters argument hash
==================

<html>
  {{ display_price | default: true, allow_false: true }}
</html>

---
(template
 (content)
 (directive
 (expression
  (filter
   body: (expression (identifier))
   name: (identifier)
   (argument_list
    (boolean)
    (argument key: (identifier) value: (boolean))))))
 (content))

==================
Filters precedence
==================

<html>
  {{ "Ground control to Major Tom." | split: "" | reverse | join: "" }}
</html>

---
(template
 (content)
 (directive
  (expression
   (filter
    body:
    (expression
     (filter
      body:
      (expression
       (filter
        body: (expression (string))
        name: (identifier)
        (argument_list (string))))
      name: (identifier)))
    name: (identifier)
    (argument_list (string)))))
 (content))

==================
Method Call
==================

<html>
  {{ page.title }}
</html>

---
(template
 (content)
 (directive
  (expression
   (access
    receiver: (identifier)
    method: (identifier))))
 (content))

==================
Compound Method Call With Filter
==================

<html>
  {{ data["page"].title | reverse}}
</html>

---
(template
 (content)
 (directive
  (expression
   (filter
    body:
    (expression
     (access
      receiver:
      (access
       receiver: (identifier)
       method: (string))
      method: (identifier)))
    name: (identifier))))
 (content))

==================
Render 
==================

<html>
  {% render 'filename' %}
</html>

---
(template
 (content)
 (directive
  (statement
   (render
    file: (string))))
 (content))

==================
Render Loop
==================

<html>
  {% render 'filename' for array as item %}
</html>

---
(template
 (content)
 (directive
  (statement
   (render
    file: (string)
    modifier: (opt_as_expr
      item: (identifier)
      identifier: (identifier)))))
 (content))

==================
Render With
==================

<html>
  {% render 'filename' with object%}
</html>

---
(template
 (content)
 (directive
  (statement
   (render
    file: (string)
    modifier: (opt_as_expr
      item: (identifier)))))
 (content))

==================
Render Variable
==================

<html>
  {% render 'filename', variable: value %}
</html>

---
(template
 (content)
 (directive
  (statement
   (render
    file: (string)
    modifier: (argument_list
      (argument
       key: (identifier)
       value: (identifier))))))
 (content))

==================
Include 
==================

<html>
  {% include 'filename' %}
</html>

---
(template
 (content)
 (directive
  (statement
   (include
    (string))))
 (content))

==================
If Statement
==================

<html>
  {% if data.url != blank %}
    hello
  {% endif %}
</html>

---
(template
 (content)
 (directive
  (if_tag
   condition: (expression
     (predicate
      left: (expression 
        (access
         receiver: (identifier)
         method: (identifier)))
      right: (expression 
        (identifier))))
   consequence: (block
     (content))))
 (content))

==================
If Contains Statement
==================

<html>
  {% if product.tags contains 'healing' %}
    This potion contains restorative properties.
  {% endif %}
</html>

---
(template
 (content)
 (directive
  (if_tag
   condition: (expression
     (predicate
      left: (expression 
        (access
         receiver: (identifier)
         method: (identifier)))
      right: (expression 
        (string))))
   consequence: (block
     (content))))
 (content))

==================
Multi Level If
==================

<html>
  {%- if template contains 'list' -%}
    <div class="collection-hero-{{ product.title }}">
      {{ product.color }}
    </div>
  {% elsif sections.settings.grid == 10 %}
    <div class="page -header text-center">
      {% render "thing" %}
    </div>
  {%- else -%}
    {%- assign limit = 16 -%}
    <div class="collection-hero-{{ limit }}">
  {%- endif -%}
</html>

---
(template
 (content)
 (directive
  (if_tag
   condition: (expression
     (predicate 
      left: (expression (identifier)) 
      right: (expression (string))))
   consequence: (block (content)
     (directive 
      (expression
       (access 
        receiver: (identifier) 
        method: (identifier))))
     (content)
     (directive
      (expression
       (access
        receiver: (identifier)
        method: (identifier))))
     (content))
   alternative: (elsif_tag
     condition: (expression
       (predicate
        left: (expression
          (access
           receiver: (access
             receiver: (identifier)
             method: (identifier))
           method: (identifier)))
        right: (expression
          (number))))
     (block
      (content)
      (directive
       (statement
        (render
         file: (string))))
      (content)))
   alternative: (else_tag
       (block
        (directive
         (statement
          (assignment
           variable_name: (identifier)
           value: (expression
             (number)))))
        (content)
        (directive
         (expression
          (identifier)))
        (content)))))
(content))

==================
Unless
==================

<html>
  {% unless product.has_only_default_variant %}
    {% assign title = product.name %}
    <div>{{ title }}</div>
  {% endunless %}
</html>

---
(template
 (content)
 (directive
  (unless_tag
   condition: (expression 
     (access 
      receiver: (identifier)
      method: (identifier)))
   consequence: (block 
     (directive 
      (statement 
       (assignment
        variable_name: (identifier)
        value: (expression
          (access
           receiver: (identifier)
           method: (identifier))))))
     (content) 
     (directive 
      (expression 
       (identifier))) 
     (content))))
(content))

==================
Case
==================

<html>
  {% case product.type %}
    {% when "Love" or "whateva" %}
      <div class="collection-{{ product.title }}">
        {{ product.color }}
      </div>
    {% when 'Strength' %}
      {% render "file" %}
      <p>This is a strength or health potion.</p>
    {% else %}
      {% render "file" %}
      <div>content</div>
  {% endcase %}
</html>

---
  (template
   (content)
   (directive
    (case_tag
     receiver: (access
       receiver: (identifier)
       method: (identifier))
     conditions: (block 
       (when_tag
        condition: (expression
          (predicate
           left: (expression
             (string))
           right: (expression
             (string))))
        consequence: (block
          (content)
          (directive
           (expression
            (access
             receiver: (identifier)
             method: (identifier))))
          (content)
          (directive
           (expression
            (access
             receiver: (identifier)
             method: (identifier))))
          (content)))
       (when_tag
        condition: (expression
          (string))
        consequence: (block
          (directive
           (statement
            (render
             file: (string))))
          (content))))
  alternative: (else_tag
      (block
       (directive
        (statement
         (render
          file: (string))))
       (content)))))
(content))

==================
Empty Case
==================

<html>
  {% case product.type %}
  {% endcase %}
</html>

---
  (template
   (content)
   (directive 
    (case_tag
     receiver: (access
       receiver: (identifier)
       method: (identifier))))
   (content))

==================
For Loop
==================

<html>
  {% for product in collection.products -%}
    {% assign name = product.title %}
    <div>{{ name }}</div>
    {% echo name %}
  {%- endfor %}
</html>

---
(template
 (content)
 (directive
  (for_loop_tag
   item: (identifier)
   iterator: (access
     receiver: (identifier)
     method: (identifier))
   body: (block
     (directive
      (statement
       (assignment
        variable_name: (identifier)
        value: (expression
          (access
           receiver: (identifier)
           method: (identifier))))))
     (content)
     (directive
      (expression
       (identifier)))
     (content)
     (directive
      (statement
       (echo
        (expression
         (identifier))))))))
(content))

==================
For Loop With Offest
==================

<html>
  {% for product in collection.products offest: 2 -%}
    {% assign name = product.title %}
    <div>{{ name }}</div>
    {% echo name %}
  {%- endfor %}
</html>

---

(template
 (content)
 (directive
  (for_loop_tag
   item: (identifier)
   iterator: (access
     receiver: (identifier)
     method: (identifier))
   modifier: (argument_list
    (argument
      key: (identifier)
      value: (number)))
   body: (block
     (directive
      (statement
       (assignment
        variable_name: (identifier)
        value: (expression
          (access
           receiver: (identifier)
           method: (identifier))))))
     (content)
     (directive
      (expression
       (identifier)))
     (content)
     (directive
      (statement
       (echo
        (expression
         (identifier))))))))
(content))

==================
For Loop With Range
==================

<html>
  {% for i in (1..upper_limit) -%}
    {{ i }}
    {{ break }}
  {%- endfor %}
</html>

---
(template
 (content)
 (directive
  (for_loop_tag
   item: (identifier)
   iterator: (range
    start: (number)
    end: (identifier))
   body: (block
     (directive
      (expression
       (identifier)))
     (directive
      (expression
       (identifier))))))
(content))

==================
For Loop With Else
==================

<html>
  {% for i in array -%}
    {% assign name = i %}
    <div>{{ name }}</div>
    {% echo name %}
  {% else %}
    {% assign name = "cool" %}
    <div>{{ name }}</div>
    {% echo name %}
  {%- endfor %}
</html>

---
  (template
   (content)
   (directive
    (for_loop_tag
     item: (identifier)
     iterator: (identifier)
     body: (block
       (directive
        (statement
         (assignment
          variable_name: (identifier)
          value: (expression (identifier)))))
       (content)
       (directive
        (expression
         (identifier)))
       (content)
       (directive
        (statement
         (echo
          (expression
           (identifier))))))
     alternative: (else_tag
       (block
        (directive
         (statement
          (assignment
           variable_name: (identifier)
           value: (expression (string)))))
        (content)
        (directive
         (expression
          (identifier)))
        (content)
        (directive
         (statement
          (echo
           (expression
            (identifier)))))))))
(content))

==================
For Loop with Cycle
==================

<html>
  {% for product in collection.products -%}
    {% cycle "group": "one", string, access.string %}
  {%- endfor %}
</html>

---
  (template
   (content)
   (directive
    (for_loop_tag
     item: (identifier)
     iterator: (access
       receiver: (identifier)
       method: (identifier))
     body: (block
       (cycle
        group_name: (string)
        group_item: (string)
        group_item: (identifier)
        group_item: (access
          receiver: (identifier)
          method: (identifier))))))
   (content))

==================
Nested For / If
==================

<html>
  {% for i in list %}
    {% if i != blank %}
      {% for j in list %}
        <div>{{ i }}</div>
      {% endfor %}
    {% else %}
      <div>{{ i }}</div>
    {% endif %}
  {% endfor %}
</html>

---
(template
 (content)
 (directive 
  (for_loop_tag
   item: (identifier)
   iterator: (identifier)
   body: (block
     (directive 
      (if_tag
       condition: (expression
         (predicate
          left: (expression 
            (identifier))
          right: (expression 
            (identifier))))
       consequence: (block
         (directive
          (for_loop_tag
           item: (identifier)
           iterator: (identifier)
           body: (block
             (content)
             (directive 
              (expression
               (identifier)))
             (content)))))
       alternative: (else_tag
         (block
          (content)
          (directive 
           (expression
            (identifier)))
          (content))))))))
  (content))

==================
Capture
==================

<html>
  {%- capture title -%}
    {% if show_up_title -%}
      Upcase title: {{ up_title }}
    {%- else -%}
      Downcase title: {{ down_title }}
    {%- endif %}
  {%- endcapture %}
</html>

---
(template
 (content)
 (directive
  (capture_tag
   variable: (identifier)
   value: (block
    (directive
     (if_tag
      condition: (expression
       (identifier))
      consequence: (block
       (content)
       (directive
        (expression
         (identifier))))
      alternative: (else_tag
       (block
        (content)
        (directive
         (expression
          (identifier))))))))))
  (content))

==================
Tablerow
==================

<html>
  {%- tablerow item in arr -%}
    {{ item }}
  {%- endtablerow %}
</html>

---
  (template
   (content)
   (directive
    (tablerow_tag
     item: (identifier)
     iterator: (identifier)
     body: (block
       (directive
        (expression
         (identifier))))))
   (content))

==================
Paginate
==================

<html>
  {% paginate collection.products by 3, window_size: 1 %}
    {% for product in collection.products -%}
      {{ product.title }}
    {%- endfor %}
    {{- paginate | default_pagination }}
  {% endpaginate %}
</html>

---
  (template
   (content)
   (directive
    (paginate_tag
     item: (access
       receiver: (identifier)
       method: (identifier))
     iterator: (number)
     modifier: (argument_list
       (argument
        key: (identifier)
        value: (number)))
     body: (block
       (directive
        (for_loop_tag
         item: (identifier)
         iterator: (access
           receiver: (identifier)
           method: (identifier))
         body: (block
           (directive
            (expression
             (access
              receiver: (identifier)
              method: (identifier)))))))
       (directive
        (expression
         (filter
          body: (expression
            (identifier))
          name: (identifier)))))))
(content))

==================
Liquid Tag With If
==================

<html>
  {% liquid
    include "file"
    assign product_type = product.type | downcase

    if product_type != blank
      product_type | trim
      echo product_type
    else
      assign product_type = "type"
    endif
  %}
</html>

---
(template
 (content)
 (directive
  (liquid_tag
   (statement
    (include
     (string)))
   (statement
    (assignment
     variable_name: (identifier)
     value: (expression
      (filter
       body: (expression
        (access
         receiver: (identifier)
         method: (identifier)))
       name: (identifier)))))
   (if_statement
    condition: (expression
     (predicate
      left: (expression
       (identifier))
      right: (expression
       (identifier))))
    consequence: (block
     (expression
      (filter
       body: (expression
        (identifier))
       name: (identifier)))
     (statement
      (echo
       (expression
        (identifier)))))
    alternative: (else_statement
     (block
      (statement
       (assignment
        variable_name: (identifier)
        value: (expression
         (string)))))))))
  (content))

==================
Liquid Tag With Case
==================

<html>
  {% liquid

    assign product_type = product.type | downcase
    assign message = ''

    case product_type
      when 'health'
        assign message = 'This is a health potion!'
        echo message | trim
      when 'love'
        assign message = 'This is a love potion!'
      else
        render "page"
        product_type | json
    endcase

    echo message
  %}
</html>

---
  (template
   (content)
   (directive
    (liquid_tag

     (statement
      (assignment
       variable_name: (identifier)
       value: (expression
        (filter
         body: (expression
          (access
           receiver: (identifier)
           method: (identifier)))
         name: (identifier)))))

     (statement
      (assignment
       variable_name: (identifier)
       value: (expression
        (string))))

     (case_statment
      receiver: (identifier)
      conditions: (block
       (when_statement
        condition: (expression
         (string))
        consequence: (block
         (statement
          (assignment
           variable_name: (identifier)
           value: (expression
            (string))))
         (statement
          (echo
           (expression
            (filter
             body: (expression
              (identifier))
             name: (identifier)))))))
       (when_statement
        condition: (expression
         (string))
        consequence: (block
         (statement
          (assignment
           variable_name: (identifier)
           value: (expression
            (string)))))))
      alternative: (else_statement
       (block
        (statement
         (render
          file: (string)))
        (expression
         (filter
          body: (expression
           (identifier))
          name: (identifier))))))

  (statement
   (echo
    (expression
     (identifier))))))
(content))

==================
Liquid Tag With For Loop
==================

<html>
  {% liquid
    for product_type in product.types
      assign data = product_type
      cycle "group": "one", string, access.string
      echo data
    endfor
  %}
</html>

---
  (template
   (content)
   (directive
    (liquid_tag
     (for_loop_statement
      item: (identifier)
      iterator: (access
        receiver: (identifier)
        method: (identifier))
      body: (block
        (statement
         (assignment
          variable_name: (identifier)
          value: (expression
            (identifier))))
        (cycle
         group_name: (string)
         group_item: (string)
         group_item: (identifier)
         group_item: (access
           receiver: (identifier)
           method: (identifier)))
        (statement
         (echo
          (expression
           (identifier))))))))
(content))

==================
Liquid Tag With Capture
==================

<html>
  {% liquid
    capture title
      if show_up_title
         up_title
      else
        down_title
      endif
    endcapture
  %}
</html>

---
(template
 (content)
 (directive
  (liquid_tag
   (capture_statement
    variable: (identifier)
    value: (block
       (if_statement
        condition: (expression
          (identifier))
        consequence: (block
           (expression
            (identifier)))
        alternative: (else_statement
          (block
            (expression
             (identifier)))))))))
  (content))

==================
Liquid Tag With Tablerow
==================

<html>
  {% liquid
    tablerow product_type in product.types
      assign data = product_type
      echo data
    endtablerow
  %}
</html>

---
  (template
    (content)
    (directive
      (liquid_tag
        (tablerow_statement
          item: (identifier)
          iterator: (access
            receiver: (identifier)
            method: (identifier))
          body: (block
           (statement
            (assignment
             variable_name: (identifier)
             value: (expression
              (identifier))))
           (statement
            (echo
             (expression
              (identifier))))))))
    (content))

==================
Keyword Conflict
==================

<html>
  <div class="width-{{ section.page }} fadeIn" data-delay="100ms">
</html>

---
(template
(content)
  (directive
    (expression
      (access
        receiver: (identifier)
        method: (identifier))))
(content))

==================
Inline Comment
==================

<html>
  {% # render "string"
     # this renders a string
     # cool
  %}
</html>

---
(template
 (content)
 (comment)
 (content))

==================
Paired Tag Comment
==================

<html>
  {% if true %}
    {% comment %}
      {% render "something" %}
      {{ data.page.title | reverse }}
      <div>hi</div>
      {{ data.page }}
      content
    {% endcomment %}
  {% endif %}
</html>

---
(template
  (content)
  (directive
   (if_tag
    condition: (expression 
      (boolean))
    consequence: (block
      (comment))))
    (content))

==================
Raw Tag
==================

<html>
  {% raw %}
    {% render "something" %}
    {{ data.page.title | reverse }}
    <div>hi</div>
    {{ data.page }}
    content
  {% endraw %}
</html>

---
()
